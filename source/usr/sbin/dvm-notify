#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Mohamed Emad (icon from vnstat-client package)
# Copyright desertwitch
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
CONFIG="/etc/vnstat/dwdvm.cfg"
ACTIONS="/etc/vnstat/dvm-user-actions.sh"
NOTIFY="/usr/local/emhttp/plugins/dynamix/scripts/notify"
HOST="$(echo "$HOSTNAME" | awk '{print toupper($0)}')"

[ -e "$CONFIG" ] && source $CONFIG
[ -e "$ACTIONS" ] && source $ACTIONS

SUBJECT="[${HOST}] DVM (${PRIMARY}):"

if [ ! "$GOODNOTIFY" == "enable" ] && [ ! "$BADNOTIFY" == "enable" ] && [ ! "$GOODACTIONS" == "enable" ] && [ ! "$BADACTIONS" == "enable" ]; then
    echo "All notifications and user actions are disabled... exiting"
    exit 0
fi

if ! pgrep -x vnstatd >/dev/null 2>&1; then
    echo "DVM service is not running... exiting"
    exit 0
fi

allLimits=("$RXLIMITH" "$RXLIMITD" "$RXLIMITM" "$RXLIMITY" "$TXLIMITH" "$TXLIMITD" "$TXLIMITM" "$TXLIMITY")
allUnits=("$RXUNITH" "$RXUNITD" "$RXUNITM" "$RXUNITY" "$TXUNITH" "$TXUNITD" "$TXUNITM" "$TXUNITY")
allBadFiles=("dvm_h_bad_rx_notified" "dvm_d_bad_rx_notified" "dvm_m_bad_rx_notified" "dvm_y_bad_rx_notified" "dvm_h_bad_tx_notified" "dvm_d_bad_tx_notified" "dvm_m_bad_tx_notified" "dvm_y_bad_tx_notified")
allMetrics=("hour" "day" "month" "year" "hour" "day" "month" "year")
allMetricsCaps=("Hour" "Day" "Month" "Year" "Hour" "Day" "Month" "Year")
allMetricModes=("rx" "rx" "rx" "rx" "tx" "tx" "tx" "tx")
allMetricModesCaps=("RX" "RX" "RX" "RX" "TX" "TX" "TX" "TX")
allMetricParameters=("h" "d" "m" "y" "h" "d" "m" "y")
allMetricModesAlt=("IN" "IN" "IN" "IN" "OUT" "OUT" "OUT" "OUT")
allBadFunctions=("hour_rx_reached" "day_rx_reached" "month_rx_reached" "year_rx_reached" "hour_tx_reached" "day_tx_reached" "month_tx_reached" "year_tx_reached")
allGoodFunctions=("hour_rx_normal_again" "day_rx_normal_again" "month_rx_normal_again" "year_rx_normal_again" "hour_tx_normal_again" "day_tx_normal_again" "month_tx_normal_again" "year_tx_normal_again")
allBadDockers=("$RXDOCKERHSTOP" "$RXDOCKERDSTOP" "$RXDOCKERMSTOP" "$RXDOCKERYSTOP" "$TXDOCKERHSTOP" "$TXDOCKERDSTOP" "$TXDOCKERMSTOP" "$TXDOCKERYSTOP")
allGoodDockers=("$RXDOCKERHSTART" "$RXDOCKERDSTART" "$RXDOCKERMSTART" "$RXDOCKERYSTART" "$TXDOCKERHSTART" "$TXDOCKERDSTART" "$TXDOCKERMSTART" "$TXDOCKERYSTART")
allBadVMS=("$RXVMHSTOP" "$RXVMDSTOP" "$RXVMMSTOP" "$RXVMYSTOP" "$TXVMHSTOP" "$TXVMDSTOP" "$TXVMMSTOP" "$TXVMYSTOP")
allGoodVMS=("$RXVMHSTART" "$RXVMDSTART" "$RXVMMSTART" "$RXVMYSTART" "$TXVMHSTART" "$TXVMDSTART" "$TXVMMSTART" "$TXVMYSTART")

echo ""
echo "--- PRIMARY INTERFACE CHECKS ---"
echo ""

if [ -n "${PRIMARY}" ] && [ ! "${PRIMARY}" == "noiface" ] && [ -e "/sys/class/net/${PRIMARY}" ]; then
    if (vnstat --config /etc/vnstat/vnstat.conf --dbiflist 2>/dev/null | grep "$PRIMARY" >/dev/null 2>&1); then
        for i in "${!allLimits[@]}"; do
            RESULT1=""
            RESULT2=""
            RESULT3=""
            RESULT1MESSAGE=""
            RESULT2MESSAGE=""
            RESULT3MESSAGE=""
            if [ "${allLimits[$i]}" == "-1" ]; then
                echo "(${PRIMARY}) ${allMetricModesCaps[$i]} ${allMetrics[$i]} [${allLimits[$i]} ${allUnits[$i]}]... NOT CHECKING (LIMIT DISABLED)"
                rm -f "/tmp/${allBadFiles[$i]}"
            else
                echo -n "(${PRIMARY}) ${allMetricModesCaps[$i]} ${allMetrics[$i]} [${allLimits[$i]} ${allUnits[$i]}]... "
                if ! (vnstat --config /etc/vnstat/vnstat.conf --alert 0 3 "${allMetricParameters[$i]}" "${allMetricModes[$i]}" "${allLimits[$i]}" "${allUnits[$i]}" "$PRIMARY" | grep -i "error" >/dev/null 2>&1); then
                    if ! vnstat --config /etc/vnstat/vnstat.conf --alert 0 3 "${allMetricParameters[$i]}" "${allMetricModes[$i]}" "${allLimits[$i]}" "${allUnits[$i]}" "$PRIMARY" >/dev/null 2>&1; then
                        if [ ! -f "/tmp/${allBadFiles[$i]}" ]; then
                            echo "[${PRIMARY}] DVM: The per ${allMetrics[$i]} ${allMetricModesAlt[$i]}-bound data volume was exceeded." | logger -t "dvm-notify"
                            if [ "$BADACTIONS" == "enable" ]; then
                                if [ ! "${allBadDockers[$i]}" == "disable" ]; then
                                    echo "[${PRIMARY}] DVM: Attempting to stop Docker container (as configured by user): ${allBadDockers[$i]}" | logger -t "dvm-notify"
                                    docker stop "${allBadDockers[$i]}" 2>&1 | logger -t "dvm-notify"
                                    RESULT1="${PIPESTATUS[0]}"
                                fi
                                if [ ! "${allBadVMS[$i]}" == "disable" ]; then
                                    echo "[${PRIMARY}] DVM: Attempting to disconnect VM (as configured by user): ${allBadVMS[$i]}" | logger -t "dvm-notify"
                                    VMIFACES="$(virsh domiflist "${allBadVMS[$i]}" 2>/dev/null | awk 'NR>2{ print $1 }')"
                                    if [ "${PIPESTATUS[0]}" -eq 0 ]; then
                                        for v in $VMIFACES; do
                                            if [ -e "/sys/class/net/${v}" ]; then
                                                echo "[${PRIMARY}] DVM: Now disconnecting VM from interface: ${v}" | logger -t "dvm-notify"
                                                virsh domif-setlink "${allBadVMS[$i]}" "${v}" down 2>&1 | logger -t "dvm-notify"
                                                RESULT3="${PIPESTATUS[0]}"
                                            else
                                                echo "[${PRIMARY}] DVM: VM service returned '${v}' interface for the VM... not found on system!" | logger -t "dvm-notify"
                                                RESULT3="1"
                                            fi
                                        done
                                    else
                                        echo "[${PRIMARY}] DVM: VM service did not return a valid list of interfaces for the VM." | logger -t "dvm-notify"
                                        RESULT3="1"
                                    fi
                                fi
                                echo "[${PRIMARY}] DVM: Attempting to execute dvm-user-actions function: ${allBadFunctions[$i]}" | logger -t "dvm-notify"
                                ${allBadFunctions[$i]} "${PRIMARY}" 2>&1 | logger -t "dvm-user-actions"
                                RESULT2="${PIPESTATUS[0]}"
                            fi
                            if [ "$BADNOTIFY" == "enable" ]; then
                                [ -n "$RESULT1" ] && [ "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allBadDockers[$i]}' stopped with success."
                                [ -n "$RESULT1" ] && [ ! "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allBadDockers[$i]}' stopped with errors (see SYSLOG)."
                                [ -n "$RESULT2" ] && [ "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with success."
                                [ -n "$RESULT2" ] && [ ! "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with errors (see SYSLOG)."      
                                [ -n "$RESULT3" ] && [ "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allBadVMS[$i]}' disconnected with success."
                                [ -n "$RESULT3" ] && [ ! "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allBadVMS[$i]}' disconnected with errors (see SYSLOG)."                           
                                $NOTIFY -e "Data Volume Monitor" -s "Alert ${SUBJECT} ${allMetricsCaps[$i]} ${allMetricModesCaps[$i]}" -d "The per ${allMetrics[$i]} ${allMetricModesAlt[$i]}-bound data volume was exceeded. ${RESULT1MESSAGE} ${RESULT3MESSAGE} ${RESULT2MESSAGE}" -i "alert"
                            fi
                            echo "OK (LIMIT EXCEEDED - FIRST TIME - NOTIFY: ${BADNOTIFY} / ACTIONS: ${BADACTIONS})"
                        else
                            echo "OK (LIMIT EXCEEDED - REPEAT)"
                        fi
                        touch "/tmp/${allBadFiles[$i]}"
                    else
                        if [ -f "/tmp/${allBadFiles[$i]}" ]; then
                            echo "[${PRIMARY}] DVM: The per ${allMetrics[$i]} ${allMetricModesAlt[$i]}-bound data volume is no longer exceeded." | logger -t "dvm-notify"
                            if [ "$GOODACTIONS" == "enable" ]; then
                                if [ ! "${allGoodDockers[$i]}" == "disable" ]; then
                                    echo "[${PRIMARY}] DVM: Attempting to start Docker container (as configured by user): ${allGoodDockers[$i]}" | logger -t "dvm-notify"
                                    docker start "${allGoodDockers[$i]}" 2>&1 | logger -t "dvm-notify"
                                    RESULT1="${PIPESTATUS[0]}"
                                fi
                                if [ ! "${allGoodVMS[$i]}" == "disable" ]; then
                                    echo "[${PRIMARY}] DVM: Attempting to reconnect VM (as configured by user): ${allGoodVMS[$i]}" | logger -t "dvm-notify"
                                    VMIFACES="$(virsh domiflist "${allGoodVMS[$i]}" 2>/dev/null | awk 'NR>2{ print $1 }')"
                                    if [ "${PIPESTATUS[0]}" -eq 0 ]; then
                                        for v in $VMIFACES; do
                                            if [ -e "/sys/class/net/${v}" ]; then
                                                echo "[${PRIMARY}] DVM: Now reconnecting VM to interface: ${v}" | logger -t "dvm-notify"
                                                virsh domif-setlink "${allGoodVMS[$i]}" "${v}" up 2>&1 | logger -t "dvm-notify"
                                                RESULT3="${PIPESTATUS[0]}"
                                            else
                                                echo "[${PRIMARY}] DVM: VM service returned '${v}' interface for the VM... not found on system!" | logger -t "dvm-notify"
                                                RESULT3="1"
                                            fi
                                        done
                                    else
                                        echo "[${PRIMARY}] DVM: VM service did not return a valid list of interfaces for the VM." | logger -t "dvm-notify"
                                        RESULT3="1"
                                    fi
                                fi                                
                                echo "[${PRIMARY}] DVM: Attempting to execute dvm-user-actions function: ${allGoodFunctions[$i]}" | logger -t "dvm-notify"
                                ${allGoodFunctions[$i]} "${PRIMARY}" 2>&1 | logger -t "dvm-user-actions"
                                RESULT2="${PIPESTATUS[0]}"
                            fi
                            if [ "$GOODNOTIFY" == "enable" ]; then
                                [ -n "$RESULT1" ] && [ "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allGoodDockers[$i]}' started with success."
                                [ -n "$RESULT1" ] && [ ! "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allGoodDockers[$i]}' started with errors (see SYSLOG)."
                                [ -n "$RESULT2" ] && [ "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with success."
                                [ -n "$RESULT2" ] && [ ! "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with errors (see SYSLOG)."   
                                [ -n "$RESULT3" ] && [ "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allGoodVMS[$i]}' reconnected with success."
                                [ -n "$RESULT3" ] && [ ! "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allGoodVMS[$i]}' reconnected with errors (see SYSLOG)."                            
                                $NOTIFY -e "Data Volume Monitor" -s "Notice ${SUBJECT} ${allMetricsCaps[$i]} ${allMetricModesCaps[$i]} OK" -d "The per ${allMetrics[$i]} ${allMetricModesAlt[$i]}-bound data volume is no longer exceeded. ${RESULT1MESSAGE} ${RESULT3MESSAGE} ${RESULT2MESSAGE}" -i "normal"
                            fi
                            echo "OK (LIMIT NOT EXCEEDED - FIRST TIME - NOTIFY: ${GOODNOTIFY} / ACTIONS: ${GOODACTIONS})"
                        else
                            echo "OK (LIMIT NOT EXCEEDED - REPEAT)"
                        fi
                        rm -f "/tmp/${allBadFiles[$i]}"
                    fi
                else
                    echo "FAILED (DATABASE WAS NOT READY)"
                fi
            fi
        done
    else
        echo "PRIMARY INTERFACE NOT IN DATABASE - SKIPPING PRIMARY CHECKS"
    fi
else
    echo "PRIMARY INTERFACE DOES NOT EXIST ON SYSTEM - SKIPPING PRIMARY CHECKS"
fi

echo ""
echo "--- SECONDARY INTERFACE CHECKS ---"
echo ""

allCustomInterfaces=("$CUSTOM1INTERFACE" "$CUSTOM2INTERFACE" "$CUSTOM3INTERFACE" "$CUSTOM4INTERFACE" "$CUSTOM5INTERFACE" "$CUSTOM6INTERFACE")
allCustomModes=("$CUSTOM1MODE" "$CUSTOM2MODE" "$CUSTOM3MODE" "$CUSTOM4MODE" "$CUSTOM5MODE" "$CUSTOM6MODE")
allCustomTimes=("$CUSTOM1TIME" "$CUSTOM2TIME" "$CUSTOM3TIME" "$CUSTOM4TIME" "$CUSTOM5TIME" "$CUSTOM6TIME")
allCustomLimits=("$CUSTOM1LIMIT" "$CUSTOM2LIMIT" "$CUSTOM3LIMIT" "$CUSTOM4LIMIT" "$CUSTOM5LIMIT" "$CUSTOM6LIMIT")
allCustomUnits=("$CUSTOM1UNIT" "$CUSTOM2UNIT" "$CUSTOM3UNIT" "$CUSTOM4UNIT" "$CUSTOM5UNIT" "$CUSTOM6UNIT")
allCustomStops=("$CUSTOM1STOP" "$CUSTOM2STOP" "$CUSTOM3STOP" "$CUSTOM4STOP" "$CUSTOM5STOP" "$CUSTOM6STOP")
allCustomStarts=("$CUSTOM1START" "$CUSTOM2START" "$CUSTOM3START" "$CUSTOM4START" "$CUSTOM5START" "$CUSTOM6START")
allCustomVMStops=("$CUSTOM1VMSTOP" "$CUSTOM2VMSTOP" "$CUSTOM3VMSTOP" "$CUSTOM4VMSTOP" "$CUSTOM5VMSTOP" "$CUSTOM6VMSTOP")
allCustomVMStarts=("$CUSTOM1VMSTART" "$CUSTOM2VMSTART" "$CUSTOM3VMSTART" "$CUSTOM4VMSTART" "$CUSTOM5VMSTART" "$CUSTOM6VMSTART")

for i in "${!allCustomInterfaces[@]}"; do
    RESULT1=""
    RESULT2=""
    RESULT3=""
    RESULT1MESSAGE=""
    RESULT2MESSAGE=""
    RESULT3MESSAGE=""
    UPPERMODE="$(echo "${allCustomModes[$i]}" | awk '{print toupper($0)}')"
    HUMANTIME="${allCustomTimes[$i]}"
    case "${allCustomTimes[$i]}" in
    'h')
        HUMANTIME="hour"
        ;;
    'd')
        HUMANTIME="day"
        ;;
    'm')
        HUMANTIME="month"
        ;;
    'y')
        HUMANTIME="year"
        ;;
    *)
        HUMANTIME="${allCustomTimes[$i]}"
        ;;
    esac
    HUMANTIMECAPS="${allCustomTimes[$i]}"
    case "${allCustomTimes[$i]}" in
    'h')
        HUMANTIMECAPS="Hour"
        ;;
    'd')
        HUMANTIMECAPS="Day"
        ;;
    'm')
        HUMANTIMECAPS="Month"
        ;;
    'y')
        HUMANTIMECAPS="Year"
        ;;
    *)
        HUMANTIMECAPS="${allCustomTimes[$i]}"
        ;;
    esac
    HUMANMODE="${allCustomModes[$i]}"
    case "${allCustomModes[$i]}" in
    'rx')
        HUMANMODE="IN"
        ;;
    'tx')
        HUMANMODE="OUT"
        ;;
    *)
        HUMANMODE="${allCustomModes[$i]}"
        ;;
    esac
    if [ "${allCustomLimits[$i]}" == "-1" ]; then
        echo "(${allCustomInterfaces[$i]}) ${UPPERMODE} ${HUMANTIME} [${allCustomLimits[$i]} ${allCustomUnits[$i]}]... NOT CHECKING (LIMIT DISABLED)"
        rm -f "/tmp/dvm_${allCustomInterfaces[$i]}_${allCustomTimes[$i]}_bad_${allCustomModes[$i]}_notified"
    else
        echo -n "(${allCustomInterfaces[$i]}) ${UPPERMODE} ${HUMANTIME} [${allCustomLimits[$i]} ${allCustomUnits[$i]}]... "
        if [ -n "${allCustomInterfaces[$i]}" ] && [ ! "${allCustomInterfaces[$i]}" == "$PRIMARY" ] && [ ! "${allCustomInterfaces[$i]}" == "noiface" ] && [ -e "/sys/class/net/${allCustomInterfaces[$i]}" ]; then
            if (vnstat --config /etc/vnstat/vnstat.conf --dbiflist 2>/dev/null | grep "${allCustomInterfaces[$i]}" >/dev/null 2>&1); then
                if ! (vnstat --config /etc/vnstat/vnstat.conf --alert 0 3 "${allCustomTimes[$i]}" "${allCustomModes[$i]}" "${allCustomLimits[$i]}" "${allCustomUnits[$i]}" "${allCustomInterfaces[$i]}" | grep -i "error" >/dev/null 2>&1); then
                    if ! vnstat --config /etc/vnstat/vnstat.conf --alert 0 3 "${allCustomTimes[$i]}" "${allCustomModes[$i]}" "${allCustomLimits[$i]}" "${allCustomUnits[$i]}" "${allCustomInterfaces[$i]}" >/dev/null 2>&1; then
                        if [ ! -f "/tmp/dvm_${allCustomInterfaces[$i]}_${allCustomTimes[$i]}_bad_${allCustomModes[$i]}_notified" ]; then
                            echo "[${allCustomInterfaces[$i]}] DVM: The per ${HUMANTIME} ${HUMANMODE}-bound data volume was exceeded." | logger -t "dvm-notify"
                            if [ "$BADACTIONS" == "enable" ]; then
                                if [ ! "${allCustomStops[$i]}" == "disable" ]; then
                                    echo "[${allCustomInterfaces[$i]}] DVM: Attempting to stop Docker container (as configured by user): ${allCustomStops[$i]}" | logger -t "dvm-notify"
                                    docker stop "${allCustomStops[$i]}" 2>&1 | logger -t "dvm-notify"
                                    RESULT1="${PIPESTATUS[0]}"
                                fi
                                if [ ! "${allCustomVMStops[$i]}" == "disable" ]; then
                                    echo "[${allCustomInterfaces[$i]}] DVM: Attempting to disconnect VM (as configured by user): ${allCustomVMStops[$i]}" | logger -t "dvm-notify"
                                    VMIFACES="$(virsh domiflist "${allCustomVMStops[$i]}" 2>/dev/null | awk 'NR>2{ print $1 }')"
                                    if [ "${PIPESTATUS[0]}" -eq 0 ]; then
                                        for v in $VMIFACES; do
                                            if [ -e "/sys/class/net/${v}" ]; then
                                                echo "[${allCustomInterfaces[$i]}] DVM: Now disconnecting VM from interface: ${v}" | logger -t "dvm-notify"
                                                virsh domif-setlink "${allCustomVMStops[$i]}" "${v}" down 2>&1 | logger -t "dvm-notify"
                                                RESULT3="${PIPESTATUS[0]}"
                                            else
                                                echo "[${allCustomInterfaces[$i]}] DVM: VM service returned '${v}' interface for the VM... not found on system!" | logger -t "dvm-notify"
                                                RESULT3="1"
                                            fi
                                        done
                                    else
                                        echo "[${allCustomInterfaces[$i]}] DVM: VM service did not return a valid list of interfaces for the VM." | logger -t "dvm-notify"
                                        RESULT3="1"
                                    fi
                                fi                                
                                echo "[${allCustomInterfaces[$i]}] DVM: Attempting to execute dvm-user-actions function: ${HUMANTIME}_${allCustomModes[$i]}_reached" | logger -t "dvm-notify"
                                eval "${HUMANTIME}_${allCustomModes[$i]}_reached" "${allCustomInterfaces[$i]}" 2>&1 | logger -t "dvm-user-actions"
                                RESULT2="${PIPESTATUS[0]}"
                            fi
                            if [ "$BADNOTIFY" == "enable" ]; then
                                [ -n "$RESULT1" ] && [ "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allCustomStops[$i]}' stopped with success."
                                [ -n "$RESULT1" ] && [ ! "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allCustomStops[$i]}' stopped with errors (see SYSLOG)."
                                [ -n "$RESULT2" ] && [ "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with success."
                                [ -n "$RESULT2" ] && [ ! "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with errors (see SYSLOG)."
                                [ -n "$RESULT3" ] && [ "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allCustomVMStops[$i]}' disconnected with success."
                                [ -n "$RESULT3" ] && [ ! "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allCustomVMStops[$i]}' disconnected with errors (see SYSLOG)."                                      
                                $NOTIFY -e "Data Volume Monitor" -s "Alert ${SUBJECT} ${HUMANTIMECAPS} ${UPPERMODE}" -d "The per ${HUMANTIME} ${HUMANMODE}-bound data volume was exceeded. ${RESULT1MESSAGE} ${RESULT3MESSAGE} ${RESULT2MESSAGE}" -i "alert"
                            fi
                            echo "OK (LIMIT EXCEEDED - FIRST TIME - NOTIFY: ${BADNOTIFY} / ACTIONS: ${BADACTIONS})"
                        else
                            echo "OK (LIMIT EXCEEDED - REPEAT)"
                        fi
                        touch "/tmp/dvm_${allCustomInterfaces[$i]}_${allCustomTimes[$i]}_bad_${allCustomModes[$i]}_notified"
                    else
                        if [ -f "/tmp/dvm_${allCustomInterfaces[$i]}_${allCustomTimes[$i]}_bad_${allCustomModes[$i]}_notified" ]; then
                            echo "[${allCustomInterfaces[$i]}] DVM: The per ${HUMANTIME} ${HUMANMODE}-bound data volume is no longer exceeded." | logger -t "dvm-notify"
                            if [ "$GOODACTIONS" == "enable" ]; then
                                if [ ! "${allCustomStarts[$i]}" == "disable" ]; then
                                    echo "[${allCustomInterfaces[$i]}] DVM: Attempting to start Docker container (as configured by user): ${allCustomStarts[$i]}" | logger -t "dvm-notify"
                                    docker start "${allCustomStarts[$i]}" 2>&1 | logger -t "dvm-notify"
                                    RESULT1="${PIPESTATUS[0]}"
                                fi
                                if [ ! "${allCustomVMStarts[$i]}" == "disable" ]; then
                                    echo "[${allCustomInterfaces[$i]}] DVM: Attempting to reconnect VM (as configured by user): ${allCustomVMStarts[$i]}" | logger -t "dvm-notify"
                                    VMIFACES="$(virsh domiflist "${allCustomVMStarts[$i]}" 2>/dev/null | awk 'NR>2{ print $1 }')"
                                    if [ "${PIPESTATUS[0]}" -eq 0 ]; then
                                        for v in $VMIFACES; do
                                            if [ -e "/sys/class/net/${v}" ]; then
                                                echo "[${allCustomInterfaces[$i]}] DVM: Now reconnecting VM to interface: ${v}" | logger -t "dvm-notify"
                                                virsh domif-setlink "${allCustomVMStarts[$i]}" "${v}" up 2>&1 | logger -t "dvm-notify"
                                                RESULT3="${PIPESTATUS[0]}"
                                            else
                                                echo "[${allCustomInterfaces[$i]}] DVM: VM service returned '${v}' interface for the VM... not found on system!" | logger -t "dvm-notify"
                                                RESULT3="1"
                                            fi
                                        done
                                    else
                                        echo "[${allCustomInterfaces[$i]}] DVM: VM service did not return a valid list of interfaces for the VM." | logger -t "dvm-notify"
                                        RESULT3="1"
                                    fi
                                fi                                    
                                echo "[${allCustomInterfaces[$i]}] DVM: Attempting to execute dvm-user-actions function: ${HUMANTIME}_${allCustomModes[$i]}_normal_again" | logger -t "dvm-notify"
                                eval "${HUMANTIME}_${allCustomModes[$i]}_normal_again" "${allCustomInterfaces[$i]}" 2>&1 | logger -t "dvm-user-actions"
                                RESULT2="${PIPESTATUS[0]}"
                            fi
                            if [ "$GOODNOTIFY" == "enable" ]; then
                                [ -n "$RESULT1" ] && [ "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allCustomStarts[$i]}' started with success."
                                [ -n "$RESULT1" ] && [ ! "$RESULT1" -eq 0 ] && RESULT1MESSAGE="Docker container '${allCustomStarts[$i]}' started with errors (see SYSLOG)."
                                [ -n "$RESULT2" ] && [ "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with success."
                                [ -n "$RESULT2" ] && [ ! "$RESULT2" -eq 0 ] && RESULT2MESSAGE="User actions executed with errors (see SYSLOG)." 
                                [ -n "$RESULT3" ] && [ "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allCustomVMStarts[$i]}' reconnected with success."
                                [ -n "$RESULT3" ] && [ ! "$RESULT3" -eq 0 ] && RESULT3MESSAGE="VM '${allCustomVMStarts[$i]}' reconnected with errors (see SYSLOG)."                                                                 
                                $NOTIFY -e "Data Volume Monitor" -s "Notice ${SUBJECT} ${HUMANTIMECAPS} ${UPPERMODE} OK" -d "The per ${HUMANTIME} ${HUMANMODE}-bound data volume is no longer exceeded. ${RESULT1MESSAGE} ${RESULT3MESSAGE} ${RESULT2MESSAGE}" -i "normal"
                            fi
                            echo "OK (LIMIT NOT EXCEEDED - FIRST TIME - NOTIFY: ${GOODNOTIFY} / ACTIONS: ${GOODACTIONS})"
                        else
                            echo "OK (LIMIT NOT EXCEEDED - REPEAT)"
                        fi
                        rm -f "/tmp/dvm_${allCustomInterfaces[$i]}_${allCustomTimes[$i]}_bad_${allCustomModes[$i]}_notified"
                    fi
                else
                    echo "FAILED (DATABASE WAS NOT READY)"
                fi
            else
                echo "FAILED (INTERFACE NOT IN DATABASE)"
            fi
        else
            echo "FAILED (INTERFACE DOES NOT EXIST ON SYSTEM OR PRIMARY INTERFACE USED AS SECONDARY)"
        fi
    fi
done
