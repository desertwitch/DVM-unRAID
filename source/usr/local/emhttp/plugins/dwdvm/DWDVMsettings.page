Menu="Utilities"
Type="xmenu"
Title="Data Volume Monitor"
Icon="pie-chart"
Tag="pie-chart"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Mohamed Emad (icon from vnstat-client package)
 * Copyright desertwitch
 *
 * Copyright Dan Landon
 * Copyright Bergware International
 * Copyright Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
?>
<? require_once '/usr/local/emhttp/plugins/dwdvm/include/dwdvm_config.php'; ?>

<div>
<table class="tablesorter shift" border="1">
<thead>
<tr><th><strong>Network Interface</strong></th><th colspan="2"><strong>Last 5 Minutes</strong></th><th colspan="2"><strong>Last Hour</strong></th><th colspan="2"><strong>Last Day</strong></th><th colspan="2"><strong>Last Month</strong></th><th colspan="2"><strong>Last Year</strong></th></tr>
<tr><th></th><th>INBOUND (RX)</th><th>OUTBOUND (TX)</th><th>INBOUND (RX)</th><th>OUTBOUND (TX)</th><th>INBOUND (RX)</th><th>OUTBOUND (TX)</th><th>INBOUND (RX)</th><th>OUTBOUND (TX)</th><th>INBOUND (RX)</th><th>OUTBOUND (TX)</th></tr>
</thead>
<tbody class="dvm_lightreport">
<?if($dwdvm_running):?>
<tr><td colspan='11' style="text-align:center"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em></td></tr>
<?endif;?>
</tbody>
</table>
</div>


<div>
<table class="tablesorter">
<thead><tr><th><strong>Network Interface</strong></th><th><strong>Report (Summary)</strong></th><th><strong>Report (5 Minutes)</strong></th><th><strong>Report (Hours)</strong></th><th><strong>Report (Days)</strong></th><th><strong>Report (Months)</strong></th><th><strong>Report (Years)</strong></th></tr></thead>
<tbody class="dvm_report">
<?if($dwdvm_running):?>
<tr><td colspan='7' style="text-align:center"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em></td></tr>
<?endif;?>
</tbody>
</table>
</div>

<script type="text/javascript">
<?if($dwdvm_running):?>
function getDVMReports() {
    let filters = "<?=$dwdvm_filters;?>";
    let filterArray = filters.split(";").map(filter => filter.trim()).filter(f => f);

    $.get('/plugins/dwdvm/include/dwdvm_report.php', { mode: 'report' }, function (data) {
        if (data && data.success && data.success.response) {
            let $tempContainer = $('<div>').html(data.success.response);

            if (filterArray.length > 0) {
                $tempContainer.find('tr').each(function () {
                    let $tr = $(this);
                    let $firstTd = $tr.find('td').first();
                    let tdText = $firstTd.contents().not($firstTd.children()).text().trim();

                    let spanTexts = $firstTd.find('span span').map(function () {
                        return $(this).text().trim();
                    }).get();

                    let rowMatches = false;

                    for (let filter of filterArray) {
                        if (filter.includes("+") || filter.includes("!")) {
                            let [includePart, excludePart] = filter.split("!");
                            let includeKeywords = includePart ? includePart.split("+").map(k => k.trim()) : [];
                            let excludeKeywords = excludePart ? excludePart.split("+").map(k => k.trim()) : [];

                            let matchesInclusion = includeKeywords.every(keyword =>
                                spanTexts.includes(keyword)
                            );

                            let matchesExclusion = excludeKeywords.every(keyword =>
                                spanTexts.includes(keyword)
                            );

                            if (matchesInclusion && !matchesExclusion) {
                                rowMatches = true;
                                break;
                            }
                        } else if (!filter.startsWith("!")) {
                            if (tdText.includes(filter) || spanTexts.includes(filter)) {
                                rowMatches = true;
                                break;
                            }
                        }
                    }

                    if (!rowMatches) {
                        $tr.remove();
                    }
                });
            }

            $('.dvm_report').html($tempContainer.html());
        }
    }, 'json');

    $.get('/plugins/dwdvm/include/dwdvm_report.php', { mode: 'lightreport' }, function (data) {
        if (data && data.success && data.success.response) {
            let $tempContainer = $('<div>').html(data.success.response);

            if (filterArray.length > 0) {
                $tempContainer.find('tr').each(function () {
                    let $tr = $(this);
                    let $firstTd = $tr.find('td').first();
                    let tdText = $firstTd.contents().not($firstTd.children()).text().trim();

                    let spanTexts = $firstTd.find('span span').map(function () {
                        return $(this).text().trim();
                    }).get();

                    let rowMatches = false;

                    for (let filter of filterArray) {
                        if (filter.includes("+") || filter.includes("!")) {
                            let [includePart, excludePart] = filter.split("!");
                            let includeKeywords = includePart ? includePart.split("+").map(k => k.trim()) : [];
                            let excludeKeywords = excludePart ? excludePart.split("+").map(k => k.trim()) : [];

                            let matchesInclusion = includeKeywords.every(keyword =>
                                spanTexts.includes(keyword)
                            );

                            let matchesExclusion = excludeKeywords.every(keyword =>
                                spanTexts.includes(keyword)
                            );

                            if (matchesInclusion && !matchesExclusion) {
                                rowMatches = true;
                                break;
                            }
                        } else if (!filter.startsWith("!")) {
                            if (tdText.includes(filter) || spanTexts.includes(filter)) {
                                rowMatches = true;
                                break;
                            }
                        }
                    }

                    if (!rowMatches) {
                        $tr.remove();
                    }
                });
            }

            $('.dvm_lightreport').html($tempContainer.html());
        }
    }, 'json');

    clearTimeout(timers.getDVMReports);
    timers.getDVMReports = setTimeout(getDVMReports, <?=max(abs(isset($display['refresh']) ? $display['refresh'] : 0),(30 * 1000))?>);
}
<?endif;?>

$(function() {

    <?if($dwdvm_running):?>
    getDVMReports();
    <?endif;?>

    showStatus('vnstatd');

    if ( typeof caPluginUpdateCheck === "function" ) {
        caPluginUpdateCheck("dwdvm.plg",{name:"DVM"});
    }

});
</script>
